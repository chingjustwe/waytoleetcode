package cn.com.nightfield.brainteaser;

/**
 * @author: zhochi
 * @create: 2020/11/12
 *
 * https://leetcode-cn.com/problems/airplane-seat-assignment-probability/
 * 有 n 位乘客即将登机，飞机正好有 n 个座位。第一位乘客的票丢了，他随便选了一个座位坐下。
 * 剩下的乘客将会：
 *     如果他们自己的座位还空着，就坐到自己的座位上，
 *     当他们自己的座位被占用时，随机选择其他座位
 * 第 n 位乘客坐在自己的座位上的概率是多少？
 *
 * 思路：
 * 我们可以简单地认为，第n位进来的乘客对应第n个座位。考虑乘客每次都<b>没有</b>坐在自己座位上的概率。
 * n = 1：乘客坐在自己座位上的概率P[1]=1
 * n = 2: 第一位乘客没有坐在自己座位上的概率为0.5，所以第n(即2)位乘客坐在自己座位上的概率P[2]=0.5
 * ...
 * n = n: 如果第1位乘客坐在了第1号座位上(自己的座位)，那么结果相当于n=1的情况，第n位乘客没有坐在自己的座位上的概率为1-P[1]=0
 *        如果第1位乘客坐在了第2号座位上，结果相当于n=n-1的情况，第n位乘客没有坐在自己的座位上的概率为1-P[n-1]
 *        ...
 *        如果第1位乘客坐在了第n-1号座位上，则第2到n-2位乘客都可以坐在自己的座位上，结果就相当于n=2的情况，第n位乘客没有坐在自己的座位上的概率为1-P[2]=0.5
 *        如果第1位乘客坐在了第n号座位上，则第n位乘客没有坐在自己的座位上的概率为1
 *        所以第n位乘客<b>没有</b>在自己座位的概率为：P[n] = (1 - P[n-1])/n) + (1 - P[n-2])/n) + ... + (1 - P[2])/n) + 1/n
 *        结果为：1 - (1 - P[n-1])/n) - (1 - P[n-2])/n) - ... - (1 - P[2])/n) - 1/n
 *
 * 例如：当n=3时，结果为1-(1-P[2])/3-1/3=1-1/6-1/3=0.5
 * 根据数学归纳法，得到，当n > 1时，结果总是0.5
 **/
public class NthPersonGetsNthSeat {
    public double solution(int n) {
        if (n == 1) {
            return 1l;
        }
        else {
            return 0.5;
        }
    }
}
